/**
 * Lida com a vit√≥ria sobre o chefe da masmorra.
 * @param {object} jogador O objeto do jogador.
 * @param {object} boss O objeto do chefe derrotado.
 */
function vitoriaBoss(jogador, boss) {
  // L√≥gica de recompensa do chefe (xp, ouro, drop, etc.)
  finalizarVitoria(jogador, boss);

  // NOVO: Mensagem e op√ß√µes p√≥s-vit√≥ria
  console.log(
    `\n${colors.green}üèÜ PARAB√âNS! Voc√™ conquistou esta masmorra!${colors.reset}`
  );
  console.log(`O que deseja fazer agora?`);
  console.log(`[01] Explorar mais a masmorra.`);
  console.log(`[02] Retornar √† superf√≠cie.`);

  // Voc√™ precisar√° de uma fun√ß√£o para ler a escolha do usu√°rio
  // Exemplo (usando uma fun√ß√£o que voc√™ j√° tenha para input):
  // const escolha = lerInput();
  // if (escolha === '1') {
  //   console.log("Voc√™ decide continuar explorando a masmorra, que agora est√° em paz.");
  //   // O jogo continua, e o player pode explorar outras salas vazias
  // } else if (escolha === '2') {
  //   console.log("Voc√™ retorna √† superf√≠cie, vitorioso.");
  //   jogador.masmorraAtual = null; // Remove o estado da masmorra
  //   // Retorna para o menu principal ou loop de jogo
  // }
}

/**
 * Interage com o conte√∫do da sala atual do jogador.
 * @param {object} jogador O objeto do jogador.
 */
function interagirComSala(jogador) {
  const { x, y } = jogador.posicao;
  const sala = jogador.masmorraAtual.grid[y][x];

  switch (sala.roomType) {
    case "monstro":
      console.log(
        `\n${colors.red}‚öî Voc√™ se depara com um monstro! Prepare-se para a batalha!${colors.reset}`
      );
      // Inicia a batalha
      batalhar(jogador, sala.content.mobs[0]);
      // A fun√ß√£o finalizarVitoria j√° limpar√° a sala
      break;

    case "miniboss":
      console.log(
        `\n${colors.red}üíÄ Voc√™ se depara com o mini-chefe: ${sala.content.nome}!${colors.reset}`
      );
      // Inicia a batalha contra o mini-chefe
      batalhar(jogador, sala.content);
      // A fun√ß√£o finalizarVitoria j√° limpar√° a sala
      break;

    case "trap":
      console.log(
        `\n${colors.yellow}üí• Voc√™ ativou uma armadilha!${colors.reset}`
      );
      jogador.hp -= sala.content.dano;
      console.log(
        `Voc√™ recebeu ${colors.red}${sala.content.dano}${colors.reset} de dano!`
      );

      // Limpa a sala ap√≥s a intera√ß√£o
      sala.roomType = "vazio";
      sala.content = null;
      break;

    case "treasure":
      if (sala.content.ouro > 0) {
        jogador.ouro += sala.content.ouro;
        console.log(
          `\n${colors.yellow}üí∞ Voc√™ encontrou um ba√∫ e pegou ${colors.yellow}${sala.content.ouro}${colors.reset} de ouro!`
        );
      }
      if (sala.content.item) {
        jogador.inventario.push(sala.content.item);
        console.log(
          `Voc√™ encontrou e pegou o item: ${colors.magenta}${sala.content.item.nome}${colors.reset}`
        );
      } else {
        console.log(
          `\n${colors.yellow}Voc√™ encontrou um ba√∫, mas ele est√° vazio...${colors.reset}`
        );
      }

      // Limpa a sala ap√≥s a intera√ß√£o
      sala.roomType = "vazio";
      sala.content = null;
      break;

    case "boss":
      console.log(
        `\n${colors.red}üëπ Voc√™ chegou ao fim da masmorra e se depara com o CHEFE: ${sala.content.nome}!${colors.reset}`
      );
      batalhar(jogador, sala.content, "boss");
      break;

    case "vazio":
      console.log(`\nEsta sala j√° foi explorada e est√° vazia.`);
      break;

    case "entrada":
      console.log(`\nVoc√™ est√° na entrada da masmorra.`);
      break;

    default:
      console.log(`\nVoc√™ entrou em uma sala desconhecida.`);
      break;
  }
}

// --- L√ìGICA DE CONTROLE DO ESTADO DO JOGO ---
if (jogador.masmorraAtual) {
  // O jogador est√° em uma masmorra
  // Exibe as op√ß√µes espec√≠ficas da masmorra
  console.log(
    `\n${colors.bright}Voc√™ est√° em uma masmorra! O que deseja fazer?${colors.reset}`
  );
  console.log(
    `üß≠ [01] Mover | üîé [02] Olhar | üîç [03] Investigar | üö™ [0] Sair`
  );
  const escolhaMasmorra = prompt("Escolha: ");

  switch (escolhaMasmorra) {
    case "1":
      console.log("Para onde? ([01]Norte / [02]Sul / [03]Leste / [04]Oeste");
      const direcaoEscolhida = prompt(">> ");
      let direcaoConvertida;

      switch (direcaoEscolhida) {
        case "1":
          direcaoConvertida = "norte";
          break;
        case "2":
          direcaoConvertida = "sul";
          break;
        case "3":
          direcaoConvertida = "leste";
          break;
        case "4":
          direcaoConvertida = "oeste";
          break;
        default:
          direcaoConvertida = direcaoEscolhida;
          break;
      }

      // O seu movimento j√° √© lidado aqui
      const resultado = jogador.masmorraAtual.move(direcaoConvertida);
      console.log(resultado.msg);

      // NOVO: A l√≥gica de intera√ß√£o com a sala agora est√° centralizada!
      interagirComSala(jogador);

      break;
    case "2":
      console.log(jogador.masmorraAtual.look());
      break;
    case "3":
      const resultadoInvestigacao = jogador.masmorraAtual.investigate();
      console.log(resultadoInvestigacao.msg);
      break;
    case "0":
      jogador.masmorraAtual = null; // Remove o estado da masmorra
      console.log("Voc√™ saiu da masmorra.");
      break;
    default:
      console.log("Comando inv√°lido. Tente novamente.");
      break;
  }
}
